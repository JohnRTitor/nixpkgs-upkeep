name: upkeep

on:
  schedule:
    - cron: "0 0,12 * * *"
  push:
    branches: [main]

jobs:
  build-canary:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      # See https://nix.dev/tutorials/continuous-integration-github-actions
      - uses: cachix/cachix-action@v10
        with:
          name: ploop
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - working-directory: ./nixpkgs
        run: git log -1

      - name: nix-build ALL THE THINGZZZZ
        working-directory: ./nixpkgs
        run: |
          nix-build \
            -A julia_17-bin \
            -A python3 \
            -A python3Packages.dm-haiku \
            -A python3Packages.elegy \
            -A python3Packages.flax \
            -A python3Packages.ipython \
            -A python3Packages.jax \
            -A python3Packages.jaxlib \
            -A python3Packages.jmp \
            -A python3Packages.optax \
            -A python3Packages.matplotlib \
            -A python3Packages.plotly \
            -A python3Packages.tensorflow \
            -A python3Packages.tensorflow-datasets \
            -A python3Packages.tqdm \
            -A python3Packages.treeo \
            -A python3Packages.treex \
            -A plexamp \
            -A spotify \
            -A vscode \
            -A vscodium \

  jax:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - name: Check current package version
        working-directory: ./nixpkgs
        run: |
          PACKAGE="python3Packages.jax"
          PRE_VERSION="$(nix eval --raw -f . $PACKAGE.version)"
          echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        run: |
          cp nixpkgs-upkeep/update-jax.py nixpkgs/pkgs/development/python-modules/jax/update-jax.py
          ./nixpkgs/pkgs/development/python-modules/jax/update-jax.py
          rm nixpkgs/pkgs/development/python-modules/jax/update-jax.py

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A python3Packages.jax

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          GH_TOKEN=$GH_TOKEN \
            TARGET_BRANCH="master" \
            PACKAGE=$PACKAGE \
            PRE_VERSION=$PRE_VERSION \
            TESTED_OTHER_LINUX="true" \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  julia_17-bin:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - name: Check current package version
        working-directory: ./nixpkgs
        run: |
          PACKAGE="julia_17-bin"
          PRE_VERSION="$(nix eval --raw -f . $PACKAGE.version)"
          echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        run: |
          cp nixpkgs-upkeep/update-julia-1.7.py nixpkgs/pkgs/development/compilers/julia/update-julia-1.7.py
          ./nixpkgs/pkgs/development/compilers/julia/update-julia-1.7.py
          rm nixpkgs/pkgs/development/compilers/julia/update-julia-1.7.py

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A julia_17-bin

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          GH_TOKEN=$GH_TOKEN \
            TARGET_BRANCH="master" \
            PACKAGE=$PACKAGE \
            PRE_VERSION=$PRE_VERSION \
            TESTED_OTHER_LINUX="true" \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  plexamp:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      # Plexamp is unfree, so we need to ok that in our Nix config.
      - run: |
          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnfree = true; }" > ~/.config/nixpkgs/config.nix

      - name: Check current package version before update script
        working-directory: ./nixpkgs
        # Note plexamp doesn't work with "nix eval -f . plexamp.version" for some reason.
        run: |
          PRE_VERSION="$(nix-instantiate --eval -E "with import ./. {}; lib.getVersion plexamp" --json | jq -r)"
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        run: |
          ./nixpkgs/pkgs/applications/audio/plexamp/update-plexamp.sh

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A plexamp

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          PACKAGE="plexamp" \
            TARGET_BRANCH="master" \
            TESTED_OTHER_LINUX="true" \
            PRE_VERSION=$PRE_VERSION \
            GH_TOKEN=$GH_TOKEN \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  spotify:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      # Spotify is unfree, so we need to ok that in our Nix config.
      - run: |
          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnfree = true; }" > ~/.config/nixpkgs/config.nix

      - name: Check current package version before update script
        working-directory: ./nixpkgs
        run: |
          PRE_VERSION="$(nix eval --raw -f . spotify-unwrapped.version)"
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        working-directory: ./nixpkgs
        # The spotify update script creates a commit at the end, which conflicts
        # with create-pr.sh. See https://stackoverflow.com/questions/15772134/can-i-delete-a-git-commit-but-keep-the-changes.
        run: |
          git config --global user.email "foo@bar.com"
          git config --global user.name "upkeep-bot"
          before_commit=$(git rev-parse HEAD)
          ./pkgs/applications/audio/spotify/update.sh
          after_commit=$(git rev-parse HEAD)
          if [ $before_commit != $after_commit ]; then
            git reset "HEAD^"
          fi

      - working-directory: ./nixpkgs
        run: git diff

      # Note that the update script builds the derivation already, but we do this for consistency.
      - working-directory: ./nixpkgs
        run: nix-build -A spotify

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          PACKAGE="spotify-unwrapped" \
            TARGET_BRANCH="master" \
            TESTED_OTHER_LINUX="true" \
            PRE_VERSION=$PRE_VERSION \
            GH_TOKEN=$GH_TOKEN \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  matplotlib:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - name: Check current package version before update script
        working-directory: ./nixpkgs
        run: |
          PRE_VERSION="$(nix eval --raw -f . python3Packages.matplotlib.version)"
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        run: |
          cp ./nixpkgs-upkeep/update-matplotlib.py ./nixpkgs/pkgs/development/python-modules/matplotlib
          chmod +x ./nixpkgs/pkgs/development/python-modules/matplotlib/update-matplotlib.py
          ./nixpkgs/pkgs/development/python-modules/matplotlib/update-matplotlib.py
          rm ./nixpkgs/pkgs/development/python-modules/matplotlib/update-matplotlib.py

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A python3Packages.matplotlib

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          PACKAGE="python3Packages.matplotlib" \
            TARGET_BRANCH="staging" \
            TESTED_OTHER_LINUX="true" \
            PRE_VERSION=$PRE_VERSION \
            GH_TOKEN=$GH_TOKEN \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  vscode:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - name: Check current package version before update script
        working-directory: ./nixpkgs
        run: |
          PRE_VERSION="$(nix eval --raw -f . vscode.version)"
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: allow unfree
        run: echo "{ allowUnfree = true; }" >> ~/.config/nixpkgs/config.nix

      # See https://github.com/NixOS/nixpkgs/pull/100461.
      - name: Run custom update-script
        working-directory: ./nixpkgs
        run: |
          ./pkgs/applications/editors/vscode/update-vscode.sh

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A vscode

      # It doesn't seem possible to get the URL of the current running job, only the current RUN_ID. See https://github.community/t/github-actions-url-to-run/16029/14.
      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          PACKAGE="vscode" \
            TARGET_BRANCH="master" \
            TESTED_OTHER_LINUX="true" \
            PRE_VERSION=$PRE_VERSION \
            GH_TOKEN=$GH_TOKEN \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  vscodium:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - name: Check current package version before update script
        working-directory: ./nixpkgs
        run: |
          PRE_VERSION="$(nix eval --raw -f . vscodium.version)"
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        run: |
          ./nixpkgs/pkgs/applications/editors/vscode/update-vscodium.sh

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A vscodium

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          PACKAGE="vscodium" \
            TARGET_BRANCH="master" \
            TESTED_OTHER_LINUX="true" \
            PRE_VERSION=$PRE_VERSION \
            GH_TOKEN=$GH_TOKEN \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  wandb:
    runs-on: ubuntu-latest
    steps:
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Checkout nixpkgs-upkeep
        uses: actions/checkout@v2
        with:
          path: nixpkgs-upkeep

      - name: Checkout nixpkgs
        uses: actions/checkout@v2
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          token: ${{ secrets.GH_TOKEN }}

      - name: Check current package version
        working-directory: ./nixpkgs
        run: |
          PACKAGE="python3Packages.wandb"
          PRE_VERSION="$(nix eval --raw -f . $PACKAGE.version)"
          echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
          echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Run custom update-script
        run: |
          cp nixpkgs-upkeep/update-wandb.py nixpkgs/pkgs/development/python-modules/wandb/update-wandb.py
          ./nixpkgs/pkgs/development/python-modules/wandb/update-wandb.py
          rm nixpkgs/pkgs/development/python-modules/wandb/update-wandb.py

      - working-directory: ./nixpkgs
        run: git diff

      - working-directory: ./nixpkgs
        run: nix-build -A python3Packages.wandb

      - name: Create PR
        working-directory: ./nixpkgs
        run: |
          GH_TOKEN=$GH_TOKEN \
            TARGET_BRANCH="master" \
            PACKAGE=$PACKAGE \
            PRE_VERSION=$PRE_VERSION \
            TESTED_OTHER_LINUX="true" \
            GITHUB_WORKFLOW_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            ./../nixpkgs-upkeep/create-pr.sh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
