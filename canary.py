#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p python3Packages.requests gitAndTools.gh

import argparse
import json
import os
import subprocess
import sys

import requests

parser = argparse.ArgumentParser()
parser.add_argument("--attr", required=True, help="Attribute to build")
parser.add_argument(
    "--cc",
    action="append",
    default=[],
    help="non-maintainer GitHub username(s) to cc, option can be repeated")
parser.add_argument(
    "--nixpkgs",
    default=".",
    help="Path to nixpkgs directory, default is current working directory")

args = parser.parse_args()
attr = args.attr
cc = args.cc

build_returncode = subprocess.run(["nix-build", "-A", attr],
                                  cwd=args.nixpkgs).returncode

if build_returncode == 0:
    print("Build succeeded")
    sys.exit(0)

attr_version = subprocess.run(
    [
        "nix-instantiate", "--eval", "-E",
        f"with import ./. {{}}; lib.getVersion {attr}"
    ],
    cwd=args.nixpkgs,
    stdout=subprocess.PIPE).stdout.decode("utf-8").strip()
# Note that we don't include the nixpkgs commit or the /nix/store/xxx hash here,
# since those change very frequently and would likely create duplicate issues.
tag = hash(f"nixpkgs-upkeep {attr} {attr_version}")

# Check if an issue already exists for this tag.
existing_issues = requests.get(
    "https://api.github.com/search/issues",
    headers={
        "Accept": "application/vnd.github.v3+json"
    },
    params={
        "q": f"{tag} org:NixOS repo:nixpkgs is:issue is:open author:samuela"
    }).json()["total_count"]
if existing_issues > 0:
    print(f"{existing_issues} existing issue(s) found for tag {tag}")
    sys.exit(build_returncode)

commit = subprocess.run(["git", "log", "-1", "--pretty=format:%H"],
                        cwd=args.nixpkgs,
                        stdout=subprocess.PIPE).stdout.decode("utf-8").strip()

maintainers_json = json.loads(
    subprocess.run([
        "nix", "eval", "--json", f"(import ./. {{}}).{attr}.meta.maintainers"
    ],
                   cwd=args.nixpkgs,
                   stdout=subprocess.PIPE).stdout.decode("utf-8").strip())
maintainers = [m["github"] for m in maintainers_json]

nix_info = subprocess.run(
    ["nix-shell", "-p", "nix-info", "--run", "nix-info -m"],
    stdout=subprocess.PIPE).stdout.decode("utf-8").strip()

github_workflow_url = f"https://github.com/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{os.environ['GITHUB_RUN_ID']}"
issue_body = f"""
## Issue description
Build of `{attr}` failed on x86_64-linux as of {commit}.

[build log]({github_workflow_url})

Maintainer cc: {" ".join([f"@{m}" for m in maintainers])}
Other cc: {" ".join([f"@{m}" for m in cc]) if len(cc) > 0 else "n/a"}

### Steps to reproduce
1. Checkout nixpkgs at commit {commit}
2. Run `nix-build -A {attr}`

## Technical details
```
{nix_info}
```

## Misc.
This issue was automatically generated by [nixpkgs-upkeep](https://github.com/samuela/nixpkgs-upkeep).
- [CI workflow]({github_workflow_url}) that created this issue.
- Internal tag: {tag}
"""

# Create issue
subprocess.run([
    "gh", "issue", "create", "--repo", "NixOS/nixpkgs", "--assignee",
    ",".join(maintainers), "--title",
    f"`{attr}` build failure on x86_64-linux as of `{commit[:8]}`", "--body",
    issue_body
],
               check=True)

sys.exit(build_returncode)
